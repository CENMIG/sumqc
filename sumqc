#!/bin/bash



DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR"  ]]; then DIR="$PWD"; fi
source "$DIR/awk.sh"

usage() { 
    echo "Usage: $0 [<SR|LR|QCsum>] [-t <SE|PE>] [-p <pb-rs2|pb-sequel|ont-ligation|ont-rapid|ont-1dsq>] [-i <fq.gz>] [-o <outputDir>] [-m] [-q <qcoption>]" 1>&2 ;  
}

help() {
    printf "
    sumQC contains the pipeline for QC, cleaning and, produce the summary of QC into one table including the tool to create data from the QC results manually. The workflow is managed by NextFlow (visit https://www.nextflow.io/ for more info) which requires java version of 8 or later. Software use in long read pipeline are written in python and need to download required packaged before use. (visit LongQC and Filtlong github page for more info)

    Usage: $0 [<SR|LR|QCsum>] [-t <SE|PE>] [-p <pb-rs2|pb-sequel|ont-ligation|ont-rapid|ont-1dsq>] [-i <fq.gz>] [-o <outputDir>] [-m] [-q <qcoption>] [-r]

DESCRIPTION

    sumQC require the user to specify if the input reads is short reads (SR) or long reads (LR) as a first argument..
    
    Every fastq files in the current directory will be use to supply to the pipeline. The input and output directory can be specify through option -i and -o respectively. If no options are supplied, program will assume the input and output directory as current working directory.
    
    The following programs are use for QC and cleaning process. 

           |   QC   |  Cleaning   |
            -------- -------------
        SR | FastQC | Trimmomatic |
        LR | LongQC |  Filtlong   |

    Options for the pipeline are as follows:

        -h      Print this help

        -i      Input directory

        -o      Output directory

        -m      merge unpair reads in to one file after 
                cleaning process.

        -q      QC option (default:
                SR:SLIDINGWINDOW:4:30 MINLEN:70
                LR:length 10000 --keep_percent 90)

        -r      this give argument -resume to nextflow 
                command to continue the workflow from 
                the previous stop.\n" ;
}
if [ -z $1 ];
then
    usage;
fi
READS=$1;
shift;
#path to call main.nf script outside its directory
path=$(dirname $0)
while getopts "t:p:i:o:mrq:h" o;
do
    case $o in
        t) READTYPES=$OPTARG ;;
        p) PLATFORM=$OPTARG ;;
        i) INPUTS=$OPTARG ;;
        o) OUTPUTS=$OPTARG ;;
        m) MERGES=true ;;
        r) RESUME="-resume";;
        q) QCOPT=$OPTARG ;;
        h) help ;;
    esac
done;
shift $((OPTIND - 1))


if [ -n "$READS" ]
then
    case $READS in
        SR) main_script=main.nf 
            run=true
            if [ -n "$READTYPES" ]
            then
                case $READTYPES in 
                    SE) singleend="--SE=true"
                        filename="*.f[aq]*" ;;
                    PE) singleend="--SE=false"
                        filename="*{1,2}.f[aq]*" ;;
                    *) echo "must specify PE for paired-end or SE for single-end"
                       exit 65 ;;
                esac
            else
                echo "use -t to specify read type"
                exit 65
            fi
            ;;
        LR) main_script=main-longread.nf 
            filename="*.f[aq]*"
            run=true
            if [[ 'pb-rs2 pb-sequel ont-ligation ont-rapid ont-1dsq' =~ (^|[[:space:]])"$PLATFORM"($|[[:space:]]) ]]
            then
                platform="--platform='$PLATFORM'"
            else
                usage; 
                echo "Usage: must specify platform -p {pb-rs2, pb-sequel, ont-ligation, ont-rapid, ont-1dsq}"
                exit 65
            fi
            ;;
        QCsum) shift ;
            extract_fastqc $@ | column -t -s $'\t' ;;
        compare) calculate_percent $2 $3 $4 ;;
        -h) help ;;
        *) echo "Usage : must specify reads type, SR - short read, LR - long read";
           echo "./sumqc -h     for more info"
           exit 65 ;;
    esac
else
    echo "specify reads type, SR - short read, LR - long read" 
    exit 65 
fi;



if [ -n "$INPUTS" ]
then
    if [ -d "$INPUTS" ]
    then
        input="--input=${INPUTS}${filename}"
    else
        input="--input=$INPUTS"
    fi
else
    if [ "$READTYPES" == "SE" ]
    then
        input="--input=$PWD/*.f[aq]*"
    else 
        input="--input=$PWD/*[1,2].f[aq]*"
    fi
fi



if [ -n "$OUTPUTS" ]
then 
    output="--results=$OUTPUTS"
else
    output="--results=$PWD/results"
fi



if [ -n "$MERGES" ]
then 
    merge="--mergeUnpair=$MERGES"
else
    merge=''
fi



if [ -n "$QCOPT" ]
then 
    qcopt="$QCOPT"
elif [ "$READS" = "SR" ]
then

    qcopt="SLIDINGWINDOW:4:30 MINLEN:70"

elif [ "$READS" = "LR" ]
then
    qcopt="--min_length 10000 --keep_percent 90"
fi 

if [ $run ]
then
    echo "nextflow run $path/$main_script $platform $input $output $merge --qc_option=$qcopt" $RESUME $singleend
    nextflow run $path/$main_script $platform $input $output $merge --qc_options="$qcopt" $RESUME $singleend
fi
